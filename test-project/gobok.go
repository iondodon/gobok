// Code generated by gobok v1.0.0. DO NOT EDIT.

package main

import (
	"time"
)

type AllTypesBuilder struct {
	instance *AllTypes
}

func NewAllTypesBuilder() *AllTypesBuilder {
	return &AllTypesBuilder{
		instance: &AllTypes{},
	}
}

func (b *AllTypesBuilder) BoolValue(v bool) *AllTypesBuilder {
	b.instance.BoolValue = v
	return b
}
func (b *AllTypesBuilder) IntValue(v int) *AllTypesBuilder {
	b.instance.IntValue = v
	return b
}
func (b *AllTypesBuilder) Int8Value(v int8) *AllTypesBuilder {
	b.instance.Int8Value = v
	return b
}
func (b *AllTypesBuilder) Int16Value(v int16) *AllTypesBuilder {
	b.instance.Int16Value = v
	return b
}
func (b *AllTypesBuilder) Int32Value(v int32) *AllTypesBuilder {
	b.instance.Int32Value = v
	return b
}
func (b *AllTypesBuilder) Int64Value(v int64) *AllTypesBuilder {
	b.instance.Int64Value = v
	return b
}
func (b *AllTypesBuilder) UintValue(v uint) *AllTypesBuilder {
	b.instance.UintValue = v
	return b
}
func (b *AllTypesBuilder) Uint8Value(v uint8) *AllTypesBuilder {
	b.instance.Uint8Value = v
	return b
}
func (b *AllTypesBuilder) Uint16Value(v uint16) *AllTypesBuilder {
	b.instance.Uint16Value = v
	return b
}
func (b *AllTypesBuilder) Uint32Value(v uint32) *AllTypesBuilder {
	b.instance.Uint32Value = v
	return b
}
func (b *AllTypesBuilder) Uint64Value(v uint64) *AllTypesBuilder {
	b.instance.Uint64Value = v
	return b
}
func (b *AllTypesBuilder) Float32Value(v float32) *AllTypesBuilder {
	b.instance.Float32Value = v
	return b
}
func (b *AllTypesBuilder) Float64Value(v float64) *AllTypesBuilder {
	b.instance.Float64Value = v
	return b
}
func (b *AllTypesBuilder) StringValue(v string) *AllTypesBuilder {
	b.instance.StringValue = v
	return b
}
func (b *AllTypesBuilder) ByteValue(v byte) *AllTypesBuilder {
	b.instance.ByteValue = v
	return b
}
func (b *AllTypesBuilder) RuneValue(v rune) *AllTypesBuilder {
	b.instance.RuneValue = v
	return b
}
func (b *AllTypesBuilder) BoolPtr(v *bool) *AllTypesBuilder {
	b.instance.BoolPtr = v
	return b
}
func (b *AllTypesBuilder) IntPtr(v *int) *AllTypesBuilder {
	b.instance.IntPtr = v
	return b
}
func (b *AllTypesBuilder) StringPtr(v *string) *AllTypesBuilder {
	b.instance.StringPtr = v
	return b
}
func (b *AllTypesBuilder) StructPtr(v *NestedStruct) *AllTypesBuilder {
	b.instance.StructPtr = v
	return b
}
func (b *AllTypesBuilder) TimeValue(v time.Time) *AllTypesBuilder {
	b.instance.TimeValue = v
	return b
}
func (b *AllTypesBuilder) IntArray(v []int) *AllTypesBuilder {
	b.instance.IntArray = v
	return b
}
func (b *AllTypesBuilder) StringArray(v []string) *AllTypesBuilder {
	b.instance.StringArray = v
	return b
}
func (b *AllTypesBuilder) StructArray(v []NestedStruct) *AllTypesBuilder {
	b.instance.StructArray = v
	return b
}
func (b *AllTypesBuilder) SimpleMap(v map[string]int) *AllTypesBuilder {
	b.instance.SimpleMap = v
	return b
}
func (b *AllTypesBuilder) ComplexMap(v map[string]map[int]string) *AllTypesBuilder {
	b.instance.ComplexMap = v
	return b
}
func (b *AllTypesBuilder) InterfaceMap(v map[string]interface{}) *AllTypesBuilder {
	b.instance.InterfaceMap = v
	return b
}
func (b *AllTypesBuilder) StructMap(v map[string]NestedStruct) *AllTypesBuilder {
	b.instance.StructMap = v
	return b
}
func (b *AllTypesBuilder) IntChan(v chan int) *AllTypesBuilder {
	b.instance.IntChan = v
	return b
}
func (b *AllTypesBuilder) SendChan(v chan<- string) *AllTypesBuilder {
	b.instance.SendChan = v
	return b
}
func (b *AllTypesBuilder) ReceiveChan(v <-chan bool) *AllTypesBuilder {
	b.instance.ReceiveChan = v
	return b
}
func (b *AllTypesBuilder) NestedStruct(v NestedStruct) *AllTypesBuilder {
	b.instance.NestedStruct = v
	return b
}

func (b *AllTypesBuilder) Build() *AllTypes {
	return b.instance
}

type NestedStructBuilder struct {
	instance *NestedStruct
}

func NewNestedStructBuilder() *NestedStructBuilder {
	return &NestedStructBuilder{
		instance: &NestedStruct{},
	}
}

func (b *NestedStructBuilder) Field1(v string) *NestedStructBuilder {
	b.instance.Field1 = v
	return b
}
func (b *NestedStructBuilder) Field2(v int) *NestedStructBuilder {
	b.instance.Field2 = v
	return b
}
func (b *NestedStructBuilder) Field3(v *bool) *NestedStructBuilder {
	b.instance.Field3 = v
	return b
}

func (b *NestedStructBuilder) Build() *NestedStruct {
	return b.instance
}

type AddressBuilder struct {
	instance *Address
}

func NewAddressBuilder() *AddressBuilder {
	return &AddressBuilder{
		instance: &Address{},
	}
}

func (b *AddressBuilder) Street(v string) *AddressBuilder {
	b.instance.Street = v
	return b
}
func (b *AddressBuilder) City(v string) *AddressBuilder {
	b.instance.City = v
	return b
}
func (b *AddressBuilder) Country(v string) *AddressBuilder {
	b.instance.Country = v
	return b
}

func (b *AddressBuilder) Build() *Address {
	return b.instance
}

type ContactBuilder struct {
	instance *Contact
}

func NewContactBuilder() *ContactBuilder {
	return &ContactBuilder{
		instance: &Contact{},
	}
}

func (b *ContactBuilder) Email(v string) *ContactBuilder {
	b.instance.Email = v
	return b
}
func (b *ContactBuilder) Phone(v *string) *ContactBuilder {
	b.instance.Phone = v
	return b
}
func (b *ContactBuilder) Address(v *Address) *ContactBuilder {
	b.instance.Address = v
	return b
}
func (b *ContactBuilder) IsActive(v bool) *ContactBuilder {
	b.instance.IsActive = v
	return b
}

func (b *ContactBuilder) Build() *Contact {
	return b.instance
}

type UserProfileBuilder struct {
	instance *UserProfile
}

func NewUserProfileBuilder() *UserProfileBuilder {
	return &UserProfileBuilder{
		instance: &UserProfile{},
	}
}

func (b *UserProfileBuilder) ID(v int) *UserProfileBuilder {
	b.instance.ID = v
	return b
}
func (b *UserProfileBuilder) Name(v string) *UserProfileBuilder {
	b.instance.Name = v
	return b
}
func (b *UserProfileBuilder) Age(v int) *UserProfileBuilder {
	b.instance.Age = v
	return b
}
func (b *UserProfileBuilder) Contacts(v []Contact) *UserProfileBuilder {
	b.instance.Contacts = v
	return b
}
func (b *UserProfileBuilder) Metadata(v map[string]interface{}) *UserProfileBuilder {
	b.instance.Metadata = v
	return b
}
func (b *UserProfileBuilder) Settings(v *map[string]string) *UserProfileBuilder {
	b.instance.Settings = v
	return b
}
func (b *UserProfileBuilder) CreatedAt(v int64) *UserProfileBuilder {
	b.instance.CreatedAt = v
	return b
}
func (b *UserProfileBuilder) UpdatedAt(v *int64) *UserProfileBuilder {
	b.instance.UpdatedAt = v
	return b
}

func (b *UserProfileBuilder) Build() *UserProfile {
	return b.instance
}

type PersonBuilder struct {
	instance *Person
}

func NewPersonBuilder() *PersonBuilder {
	return &PersonBuilder{
		instance: &Person{},
	}
}

func (b *PersonBuilder) Name(v string) *PersonBuilder {
	b.instance.Name = v
	return b
}
func (b *PersonBuilder) Age(v int) *PersonBuilder {
	b.instance.Age = v
	return b
}

func (b *PersonBuilder) Build() *Person {
	return b.instance
}

func CreatePerson(Name string, Age int) Person {
	return Person{
		Name: Name,
		Age:  Age,
	}
}

type EmployeeBuilder struct {
	instance *Employee
}

func NewEmployeeBuilder() *EmployeeBuilder {
	return &EmployeeBuilder{
		instance: &Employee{},
	}
}

func (b *EmployeeBuilder) ID(v int) *EmployeeBuilder {
	b.instance.ID = v
	return b
}
func (b *EmployeeBuilder) Title(v string) *EmployeeBuilder {
	b.instance.Title = v
	return b
}
func (b *EmployeeBuilder) Salary(v float64) *EmployeeBuilder {
	b.instance.Salary = v
	return b
}

func (b *EmployeeBuilder) Build() *Employee {
	return b.instance
}

func NewEmployee(ID int, Title string, Salary float64) Employee {
	return Employee{
		ID:     ID,
		Title:  Title,
		Salary: Salary,
	}
}

type SimpleBuilder struct {
	instance *Simple
}

func NewSimpleBuilder() *SimpleBuilder {
	return &SimpleBuilder{
		instance: &Simple{},
	}
}

func (b *SimpleBuilder) Name(v string) *SimpleBuilder {
	b.instance.Name = v
	return b
}
func (b *SimpleBuilder) Age(v int) *SimpleBuilder {
	b.instance.Age = v
	return b
}
func (b *SimpleBuilder) IsAdmin(v bool) *SimpleBuilder {
	b.instance.IsAdmin = v
	return b
}

func (b *SimpleBuilder) Build() *Simple {
	return b.instance
}

type UserBuilder struct {
	instance *User
}

func NewUserBuilder() *UserBuilder {
	return &UserBuilder{
		instance: &User{},
	}
}

func (b *UserBuilder) Name(v string) *UserBuilder {
	b.instance.Name = v
	return b
}
func (b *UserBuilder) Age(v int) *UserBuilder {
	b.instance.Age = v
	return b
}
func (b *UserBuilder) Tags(v []string) *UserBuilder {
	b.instance.Tags = v
	return b
}

func (b *UserBuilder) Build() *User {
	return b.instance
}
